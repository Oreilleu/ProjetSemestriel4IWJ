{{ form_start(form) }}

    {{ include('components/_form_group.html.twig', {
        field: form.date,
        label: 'Date',
    }) }}

    {{ include('components/_form_group.html.twig', {
        field: form.description,
        label: 'Description',
    }) }}

    {% if app.request.attributes.get('_route') == 'app_devis_edit' %}
        {{ include('components/_form_group.html.twig', {
            field: form.statut,
            label: 'Statut du devis',
        }) }}
    {% endif %}

    {{ include('components/_form_group.html.twig', {
        field: form.taxe,
        label: 'Taxe',
    }) }}

    {{ include('components/_form_group.html.twig', {
        field: form.client,
        label: 'Nom du client',
    }) }}


    {{ include('components/_form_group.html.twig', {
        field: form.id_lots,
        label: 'Lot',
    }) }}

    <div class="mb-3">
        {{ form_label(form.list_produit, 'Liste des produits' , {'label_attr': {'class': 'block text-gray-700 text-lg font-bold mb-2'}}) }}
        {{ form_errors(form.list_produit, { 'template': 'form/form_errors.html.twig' }) }}
        {{ form_widget(form.list_produit, {'attr': {
            'class': 'w-2xl shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ',
            'placeholder': placeholder|default('')
        } }) }}
        <select id="select_product" class="w-2xl shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            <option value="" disabled selected>Sélectionnez un produit</option>
            {% for produit in produits %}
                <option value="{{ produit.id }}">{{ produit.nom }}</option>
            {% endfor %}
        </select>
        {{ form_help(form.list_produit, {'help_attr': {'class': '' } }) }}
    </div>

    <p>Produit sélectionné : </p>

    <ul data-list-product-id='productNameDisplay' class='flex flex-col'></ul>

    {{ include('components/_submit_button.html.twig', {
        content: "Envoyer"
    }) }}

{{ form_end(form) }}

<script>
   document.getElementById('select_product').addEventListener('change', handleProductSelection);

    function handleProductSelection(event) {
        const productId = event.target.value;
        const selectedProductName = event.target[event.target.selectedIndex].text;
        const productNameDisplay = document.querySelector('[data-list-product-id="productNameDisplay"]');

        if (!isProductAlreadyChosen(productId, productNameDisplay)) {
            addProductToList(productId, selectedProductName, productNameDisplay);
        }

        updateProductListValue(productNameDisplay);
    }

    function isProductAlreadyChosen(productId, container) {
        const productAlreadyChosenIds = Array.from(container.querySelectorAll('li span[data-product-id]'))
            .map(element => element.getAttribute('data-product-id'));
        return productAlreadyChosenIds.includes(productId);
    }

    function addProductToList(productId, productName, container) {
        const listItem = createListItem(productId, productName);
        container.appendChild(listItem);
    }

    function createListItem(productId, productName) {
        const listItem = document.createElement('li');
        listItem.classList.add('inline-flex', 'items-center', 'justify-between', 'border-b', 'border-gray-200', 'py-2');

        const crossIcon = createCrossIcon();
        listItem.appendChild(crossIcon);

        const productText = document.createElement('span');
        productText.textContent = productName;
        productText.setAttribute('data-product-id', productId);
        listItem.appendChild(productText);

        const quantityInput = createQuantityInput(productId);
        listItem.appendChild(quantityInput);

        crossIcon.addEventListener('click', () => removeProduct(listItem));

        return listItem;
    }

    function createCrossIcon() {
        const cross = document.createElement('span');
        cross.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width='20' height='20' viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>`;
        return cross;
    }

    function createQuantityInput(productId) {
        const input = document.createElement('input');
        input.type = 'number';
        input.placeholder = 'Quantité';
        input.min = 1;
        input.max = 99;
        input.value = 1;
        input.setAttribute('data-product-id-input-quantity', productId);
        input.classList.add('shadow', 'appearance-none', 'border', 'rounded', 'py-2', 'px-3', 'text-gray-700', 'leading-tight', 'focus:outline-none', 'focus:shadow-outline');
        input.addEventListener('change', () => {
            input.value = Math.max(1, Math.min(99, input.value));
        });
        return input;
    }

    function removeProduct(listItem) {
        const productNameDisplay = listItem.parentNode;
        productNameDisplay.removeChild(listItem);
        updateProductListValue(productNameDisplay);
    }

    function updateProductListValue(container) {
        const products = Array.from(container.querySelectorAll('li input[data-product-id-input-quantity]')).map(input => ({
            productId: input.getAttribute('data-product-id-input-quantity'),
            quantity: input.value
        }));
        document.getElementById('devis_list_produit').value = JSON.stringify(products);
    }
</script>